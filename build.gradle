plugins {
    id 'java'
    id 'org.springframework.boot' version '3.3.3'
    id 'io.spring.dependency-management' version '1.1.6'
    id "org.sonarqube" version "4.4.1.3373"
    id 'jacoco'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.liquibase:liquibase-core:4.29.2'
    runtimeOnly 'org.postgresql:postgresql'
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    testImplementation 'org.springframework.security:spring-security-test'
    implementation 'org.springframework.boot:spring-boot-starter-mail'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    implementation group: 'io.jsonwebtoken', name: 'jjwt', version: '0.12.6'
    implementation group: 'io.jsonwebtoken', name: 'jjwt-api', version: '0.12.6'
    runtimeOnly group: 'io.jsonwebtoken', name: 'jjwt-impl', version: '0.12.6'
    runtimeOnly group: 'io.jsonwebtoken', name: 'jjwt-jackson', version: '0.12.6'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation group: 'org.springdoc', name: 'springdoc-openapi-starter-webmvc-ui', version: '2.5.0'
    testImplementation 'org.testcontainers:postgresql:1.20.1'
    testImplementation 'org.testcontainers:junit-jupiter:1.20.1'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'io.minio:minio:8.5.12'
    implementation 'com.github.loki4j:loki-logback-appender:1.5.2'
}

tasks.named('test') {
    useJUnitPlatform()
    finalizedBy 'jacocoTestReport'
}

jacoco {
    toolVersion = "0.8.11"
    reportsDirectory = layout.buildDirectory.dir('reports/jacoco')
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.required = true
        csv.required = false
        html.required = true
    }
    classDirectories.setFrom(
            files(classDirectories.files.collect {
                fileTree(dir: it, exclude: [
                        '**/Dto/*',
                        '**/Entity/*',
                        '**/Mapper/*',
                        '**/Repository/*',
                        '**/Exception/*',
                        '**/Static/*',
                        '**/Config/*',
                        '**/UserDetailsImpl.java',
                        '**/JwtAuthenticationFilter.java'
                ])
            })
    )
}

tasks.check.dependsOn jacocoTestCoverageVerification
sonar {
    properties {
        property "sonar.projectKey", "Ludogorie-Soft_b2b-opportunities-platform"
        property "sonar.organization", "ludogorie-soft-1"
        property "sonar.host.url", "https://sonarcloud.io"
        property "sonar.coverage.jacoco.xmlReportPaths", "${buildDir}/reports/jacoco/test/jacocoTestReport.xml"
        property "sonar.exclusions", "**/Dto/**,**/Entity/**,**/Mapper/**,**/Static/**,**/Exception/**,**/Config/**,**/UserDetailsImpl.java,**/JwtAuthenticationFilter.java,**/Repository/**"
    }
}
