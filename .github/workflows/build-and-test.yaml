name: Build and Test

on:
  push:
    branches:
      - '**'
      - '!main'
  workflow_dispatch:  # This enables manual triggering


jobs:
  secret-generator:
    runs-on: ubuntu-latest
    outputs:
      db_username: ${{ steps.export-secrets.outputs.db_username }}
      db_password: ${{ steps.export-secrets.outputs.db_password }}
      test_db_table_name: ${{ steps.export-secrets.outputs.test_db_table_name }}
      dockerhub_username: ${{ steps.export-secrets.outputs.dockerhub_username }}
      dockerhub_token: ${{ steps.export-secrets.outputs.dockerhub_token }}

    steps:
      - name: Install Infisical CLI
        run: |
          curl -1sLf 'https://dl.cloudsmith.io/public/infisical/infisical-cli/setup.deb.sh' | sudo -E bash
          sudo apt update && sudo apt install -y infisical

      - name: Export environment variables from Infisical
        id: export-secrets
        env:
          INFISICAL_TOKEN: ${{ secrets.INFISICAL_TOKEN }}
        run: |
          # The token that we use is for the PRODUCTION secrets from Infisical! 
          infisical export --env=development | sed "s/'//g" > .env
          echo "db_username=$(grep DB_USERNAME .env | cut -d '=' -f2)" >> $GITHUB_OUTPUT
          echo "db_password=$(grep DB_PASSWORD .env | cut -d '=' -f2)" >> $GITHUB_OUTPUT
          echo "test_db_table_name=$(grep TEST_DB_TABLE_NAME .env | cut -d '=' -f2)" >> $GITHUB_OUTPUT
          echo "dockerhub_username=$(grep DOCKERHUB_USERNAME .env | cut -d '=' -f2)" >> $GITHUB_OUTPUT
          echo "dockerhub_token=$(grep DOCKERHUB_TOKEN .env | cut -d '=' -f2)" >> $GITHUB_OUTPUT

  build-and-test:
    needs: secret-generator
    runs-on: ubuntu-latest

    services:
      db:
        image: postgres
        ports:
          - 5432:5432
        env:
          POSTGRES_USER: ${{ needs.secret-generator.outputs.db_username }}
          POSTGRES_PASSWORD: ${{ needs.secret-generator.outputs.db_password }}
          POSTGRES_DB: ${{ needs.secret-generator.outputs.test_db_table_name }}
        options: >-
          --health-cmd="pg_isready -U postgres"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5
        volumes:
          - /home/runner/icons:/icons

    steps:      
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Make dir and copy icons in it
        run: |
            sudo mkdir -p /home/runner/icons
            sudo cp -R $GITHUB_WORKSPACE/Deploy/icons/* /home/runner/icons
                    
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '21'

      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches/modules-2
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: ${{ runner.os }}-gradle

      - name: Make gradlew executable
        run: chmod +x ./gradlew
        
      - name: Install Infisical CLI
        run: |
          curl -1sLf 'https://dl.cloudsmith.io/public/infisical/infisical-cli/setup.deb.sh' | sudo -E bash
          sudo apt update && sudo apt install -y infisical
      
      - name: Export environment variables from Infisical
        env:
          INFISICAL_TOKEN: ${{ secrets.INFISICAL_TOKEN }}
        run: infisical export --env=development | sed "s/'//g" > .env

      - name: Load environment variables (globally)
        run: cat .env >> $GITHUB_ENV

      - name: Build
        run: ./gradlew build --no-daemon

      - name: Test
        run: ./gradlew test --info --no-daemon
  
  docker-build-push:
    needs:
      - build-and-test
      - secret-generator
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ needs.secret-generator.outputs.dockerhub_username }}
          password: ${{ needs.secret-generator.outputs.dockerhub_token }}

      - name: Build Docker image
        run: docker build -t ${{ needs.secret-generator.outputs.dockerhub_username }}/b2b-backend:${{ github.sha }} -f Deploy/Dockerfile .


      - name: Push Docker image to Docker Hub
        run: docker push ${{ needs.secret-generator.outputs.dockerhub_username }}/b2b-backend:${{ github.sha }}

