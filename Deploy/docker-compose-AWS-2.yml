services:
  backend:
    depends_on:
      loki:
        condition: service_started
    environment:
      LOKI_HOST: loki
      LOG_LEVEL: ${LOG_LEVEL}  # For backend logs - Loki
      LOKI_ENABLED: true

  loki:
    image: grafana/loki:3.2.1
    depends_on:
      minio:
        condition: service_healthy # Minio is used as a storage for loki
    environment:
      - LOKI_S3_USERNAME=${STORAGE_USER}
      - LOKI_S3_SECRET=${STORAGE_PASSWORD}
      - LOKI_S3_HOST=minio
      - LOKI_S3_PORT=9000
      - LOKI_S3_BUCKET_NAME=${LOKI_BUCKET_NAME}
    user: "root"
    volumes:
      - ./Logging/loki-config.yaml:/etc/loki/local-config.yaml:ro # Custom config
    command:
      - -config.expand-env=true  # Enable environment variable expansion
      - -config.file=/etc/loki/local-config.yaml
    networks:
      - logging
    restart: always

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3333:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PW}
      - DS_PROMETHEUS=prometheus
    volumes:
      - grafana-data:/var/lib/grafana
      - "./Logging/Grafana/postgresql.json:/var/lib/grafana/dashboards/postgresql.json"
      - "./Logging/Grafana/docker.json:/var/lib/grafana/dashboards/docker.json"
      - "./Logging/Grafana/host.json:/var/lib/grafana/dashboards/host.json"
      - "./Logging/Grafana/loki.json:/var/lib/grafana/dashboards/loki.json"
      - "./Logging/Grafana/zipkin.json:/var/lib/grafana/dashboards/zipkin.json"
      - "./Logging/Grafana/default.yaml:/etc/grafana/provisioning/dashboards/default.yaml"
    entrypoint:
      - sh
      - -euc
      - |
        mkdir -p /etc/grafana/provisioning/datasources
        cat <<EOF > /etc/grafana/provisioning/datasources/ds.yaml
        apiVersion: 1
        datasources:
        - name: Loki
          type: loki
          access: proxy
          orgId: 1
          url: http://loki:3100
          basicAuth: false
          isDefault: true
          version: 1
          editable: false
        - name: prometheus
          type: prometheus
          url: http://prometheus:9090
          access: proxy
          isDefault: false
        EOF
        /run.sh
    networks:
      - logging
    depends_on:
      - prometheus
      - loki
    restart: always

  prometheus:
    container_name: prometheus
    image: prom/prometheus:latest
    networks:
      - logging
    volumes:
      - "./Logging/prometheus.yml:/etc/prometheus/prometheus.yml"
    privileged: true
    restart: always

  cadvisor:
    container_name: cadvisor
    image: gcr.io/cadvisor/cadvisor:latest
    networks:
      - logging
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
      - /etc/machine-id:/etc/machine-id:ro
      - /var/lib/dbus/machine-id:/var/lib/dbus/machine-id:ro
    privileged: true
    devices:
      - /dev/kmsg
    restart: always

  postgres-exporter:
    image: quay.io/prometheuscommunity/postgres-exporter
    container_name: postgres_exporter
    environment:
      DATA_SOURCE_URI: db:5432/${DB_TABLE_NAME}?sslmode=disable
      DATA_SOURCE_USER: ${DB_USERNAME}
      DATA_SOURCE_PASS: ${DB_PASSWORD}
    networks:
      - logging
    depends_on:
      - db
    restart: always

  node-exporter:
    image: quay.io/prometheus/node-exporter:latest
    container_name: node_exporter
    command:
      - '--path.rootfs=/host'
    networks:
      - logging
    pid: host
    restart: unless-stopped
    volumes:
      - '/:/host:ro,rslave'

volumes:
  grafana-data: